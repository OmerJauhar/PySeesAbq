#!/usr/bin/env python3
"""
OpenSeesPy Model - Converted from Abaqus .inp file
Generated by PySeesAbq on 2025-08-06 23:54:25

This script contains the converted finite element model.
Make sure OpenSeesPy is installed: pip install openseespy
"""

import sys
try:
    from openseespy.opensees import *
except ImportError:
    print("Error: OpenSeesPy not found. Install with: pip install openseespy")
    sys.exit(1)

# Model Statistics
# Nodes: 5
# Elements: 4
# Materials: 1
# Sections: 0

# Initialize OpenSees Model
wipe()
model('basic', '-ndm', 3, '-ndf', 6)

# ============================================
# NODES
# ============================================
node(1, 0.000000, 0.000000, 0.000000)
node(2, 1.000000, 0.000000, 0.000000)
node(3, 2.000000, 0.000000, 0.000000)
node(4, 3.000000, 0.000000, 0.000000)
node(5, 4.000000, 0.000000, 0.000000)
# Total nodes: 5

# ============================================
# MATERIALS
# ============================================
# Material: Steel
nDMaterial('ElasticIsotropic', 1, 2.000e+05, 0.300, 7850.0)
# Total materials: 1

# Sections

# ============================================
# ELEMENTS
# ============================================
# B31 Elements (4 elements)
element('elasticBeamColumn', 1, 1, 2, 1)
element('elasticBeamColumn', 2, 2, 3, 1)
element('elasticBeamColumn', 3, 3, 4, 1)
element('elasticBeamColumn', 4, 4, 5, 1)

# Total elements: 4

# ============================================
# BOUNDARY CONDITIONS
# ============================================
fix(1, 1, 1, 1, 1, 1, 1)
# Total constrained nodes: 1

# ============================================
# LOADS
# ============================================
pattern('Plain', 1, 1)
load(5, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0.000000)
# Total loaded nodes: 1

# ============================================
# ANALYSIS SETUP
# ============================================

# Analysis parameters
constraints('Plain')
numberer('Plain')
system('BandGeneral')
test('NormDispIncr', 1.0e-6, 10)
algorithm('Newton')
integrator('LoadControl', 1.0)
analysis('Static')

# Run analysis
print('Starting analysis...')
ok = analyze(1)
if ok != 0:
    print('Analysis failed!')
else:
    print('Analysis completed successfully!')

# ============================================
# POST-PROCESSING
# ============================================

# Print model information
print('\nModel Summary:')
print('Nodes: 5')
print('Elements: 4')
print('Materials: 1')

# Uncomment the following lines for detailed output:
# printModel()
# printA()

print('\nOpenSeesPy model ready for further analysis!')